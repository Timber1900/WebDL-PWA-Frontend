{"version":3,"sources":["components/Queue/index.tsx","components/Layout/style.ts","components/QueueInput/style.ts","components/Queue/style.ts","components/QueueInput/index.tsx","components/Layout/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["curQueue","setCurQueue","Container","styled","div","Input","input","Submit","button","QueueDiv","QueueButtonsDiv","ItemContainer","Item","props","src","Thumbnail","alt","Title","Queue","useState","items","setItems","useEffect","download","a","curItems","curItem","Promise","res","rej","fetch","method","mode","cache","headers","body","JSON","stringify","url","Info","webpage_url","info","then","console","log","fileStream","streamSaver","createWriteStream","size","parseInt","Format","filesize","writableStrategy","undefined","readableStrategy","pipeTo","error","catch","finally","filter","val","i","map","onClick","QueueInput","inputRef","type","ref","value","json","newQueue","parsedData","bestFormat","quality","formats","format","newItem","thumbnail","title","push","Layout","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3553c5b7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {Container, QueueDiv, QueueButtonsDiv,ItemContainer} from './style'\r\nimport streamSaver from 'streamsaver'\r\n\r\nexport let curQueue: Array<item>;\r\nexport let setCurQueue: React.Dispatch<React.SetStateAction<item[]>>;\r\n\r\nexport interface item {\r\n  Thumbnail: string,\r\n  Title: string,\r\n  Info: any,\r\n  Format: any\r\n}\r\n\r\nconst Item = (props: item) => {\r\n  return(\r\n    <ItemContainer>\r\n      <img src={props.Thumbnail} alt='404'/>\r\n      <label>{props.Title}</label>\r\n    </ItemContainer>\r\n  )\r\n}\r\n\r\nconst Queue = () => {\r\n  const emptyQueue: Array<item> = [];\r\n  const [items, setItems] = useState(emptyQueue);\r\n\r\n  useEffect(() => {\r\n    curQueue = items;\r\n  }, [items])\r\n\r\n  useEffect(() => {\r\n    setCurQueue = setItems;\r\n  }, [])\r\n\r\n  const download = async () => {\r\n    let curItems = [...items];\r\n    for(const curItem of items){\r\n      // eslint-disable-next-line no-loop-func\r\n      await new Promise((res, rej) => {\r\n        // fetch(`http://localhost:8080/video`, {\r\n        fetch(`https://api.web-dl.live/video`, {\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          cache: 'no-cache',\r\n          headers: {\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({ url: curItem.Info.webpage_url, info: curItem.Info })\r\n        })\r\n        .then(res => {\r\n          console.log(curItem)\r\n          if(res.body){\r\n            const fileStream = streamSaver.createWriteStream(`${curItem.Title}.mkv`, {\r\n              size: parseInt(curItem.Format.filesize),\r\n              writableStrategy: undefined,\r\n              readableStrategy: undefined\r\n            })\r\n            res.body.pipeTo(fileStream)\r\n            .then(console.log, console.error)\r\n          }\r\n        })\r\n        .catch(rej)\r\n        .finally(() => {\r\n          curItems = curItems.filter((val, i) => val !== curItem)\r\n          setItems(curItems);\r\n          res(\"Done\")\r\n        });\r\n      })\r\n      .then(console.log)\r\n      .catch(console.error)\r\n    }\r\n  }\r\n\r\n  return(\r\n  <Container>\r\n    <QueueDiv>\r\n      {items.map((val, i) => {\r\n        return <Item Thumbnail={val.Thumbnail} Title={val.Title} Info={val.Info} Format={val.Format} key={i}/>\r\n      })}\r\n    </QueueDiv>\r\n    <QueueButtonsDiv>\r\n      <button onClick={download}>Download Videos</button>\r\n    </QueueButtonsDiv>\r\n  </Container>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Queue\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  margin: 1vh 1vw;\r\n  width: 98vw;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  flex-grow: 1;\r\n`;\r\n\r\nexport const Submit = styled.button`\r\n  width: fit-content;\r\n`;\r\n","import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  height: 90vh;\r\n  width: 98vw;\r\n  margin: 1vh 1vw;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const QueueDiv = styled.div`\r\n  flex: 2;\r\n  height: 100%;\r\n  width: auto;\r\n  margin: 1vh 1vw;\r\n  display: flex;\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nexport const QueueButtonsDiv = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  width: auto;\r\n  margin: 1vh 1vw;\r\n`;\r\n\r\nexport const ItemContainer = styled.div`\r\n  height: 100px;\r\n  width: 100%;\r\n\r\n  img {\r\n    height: 100%;\r\n    border-radius: 2px;\r\n  }\r\n`;\r\n\r\n","import React from 'react'\r\nimport {Input, Submit, Container} from './style'\r\n\r\nimport {curQueue, item, setCurQueue} from '../Queue'\r\nconst QueueInput = (): JSX.Element => {\r\n  let inputRef: HTMLInputElement;\r\n\r\n  const getInfo = () => {\r\n    // fetch(`http://localhost:8080/info`, {\r\n    fetch(`https://api.web-dl.live/info`, {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ url: inputRef.value })\r\n    })\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      const newQueue = [...curQueue]\r\n      const parsedData = res;\r\n      for(const item of parsedData){\r\n        const { info } = item;\r\n        let bestFormat = {quality: -1};\r\n\r\n        for(const format of info.formats) {\r\n          if(format.quality > bestFormat.quality){\r\n            bestFormat = format;\r\n          }\r\n        }\r\n\r\n        console.log(info)\r\n        const newItem: item = {\r\n          Info: info,\r\n          Thumbnail: info.thumbnail,\r\n          Title: info.title,\r\n          Format: bestFormat\r\n        };\r\n        newQueue.push(newItem)\r\n      }\r\n      setCurQueue(newQueue);\r\n    })\r\n  }\r\n\r\n  return(\r\n  <Container>\r\n    <Input type='text' ref={ref => {if(ref) inputRef = ref}}/>\r\n    <Submit onClick={getInfo}>Add to queue</Submit>\r\n  </Container>)\r\n}\r\n\r\n\r\nexport default QueueInput\r\n","import React from 'react'\r\nimport {Container} from './style'\r\nimport QueueInput from '../QueueInput'\r\nimport Queue from '../Queue'\r\n\r\n\r\nconst Layout = () => {\r\n\r\n  return(\r\n    <Container>\r\n      <QueueInput />\r\n      <Queue />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Layout;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    color: var(--white);\r\n    font-family: Roboto;\r\n  }\r\n\r\n  html {\r\n    width: 100vw;\r\n    height: 100vh;\r\n  }\r\n\r\n  body {\r\n    background-color: var(--black);\r\n    overflow: hidden;\r\n    padding: 0;\r\n    margin: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n  }\r\n\r\n  :root {\r\n    --white: #e8e6e3;\r\n    --almost-white: #CED4DA;\r\n    --light-grey: #ADB5BD;\r\n    --regular-grey: #6C757D;\r\n    --dark-grey: #495057;\r\n    --almost-black: #343A40;\r\n    --black: #212529;\r\n    --blue: #48cae4;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport Layout from './components/Layout'\r\nimport GlobalStyles from './styles/global';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Layout />\r\n      <GlobalStyles />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}